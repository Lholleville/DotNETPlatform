//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MathServiceTestApp1.Mathservice1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Mathservice1.IMathservice")]
    public interface IMathservice {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Add", ReplyAction="http://tempuri.org/IMathservice/AddResponse")]
        int Add(int piNum1, int piNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Add", ReplyAction="http://tempuri.org/IMathservice/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int piNum1, int piNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Subtract", ReplyAction="http://tempuri.org/IMathservice/SubtractResponse")]
        int Subtract(int piNum1, int piNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Subtract", ReplyAction="http://tempuri.org/IMathservice/SubtractResponse")]
        System.Threading.Tasks.Task<int> SubtractAsync(int piNum1, int piNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Multiply", ReplyAction="http://tempuri.org/IMathservice/MultiplyResponse")]
        int Multiply(int piNum1, int piNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Multiply", ReplyAction="http://tempuri.org/IMathservice/MultiplyResponse")]
        System.Threading.Tasks.Task<int> MultiplyAsync(int piNum1, int piNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Divide", ReplyAction="http://tempuri.org/IMathservice/DivideResponse")]
        int Divide(int piNum1, int piNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Divide", ReplyAction="http://tempuri.org/IMathservice/DivideResponse")]
        System.Threading.Tasks.Task<int> DivideAsync(int piNum1, int piNum2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMathserviceChannel : MathServiceTestApp1.Mathservice1.IMathservice, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MathserviceClient : System.ServiceModel.ClientBase<MathServiceTestApp1.Mathservice1.IMathservice>, MathServiceTestApp1.Mathservice1.IMathservice {
        
        public MathserviceClient() {
        }
        
        public MathserviceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MathserviceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathserviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathserviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(int piNum1, int piNum2) {
            return base.Channel.Add(piNum1, piNum2);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int piNum1, int piNum2) {
            return base.Channel.AddAsync(piNum1, piNum2);
        }
        
        public int Subtract(int piNum1, int piNum2) {
            return base.Channel.Subtract(piNum1, piNum2);
        }
        
        public System.Threading.Tasks.Task<int> SubtractAsync(int piNum1, int piNum2) {
            return base.Channel.SubtractAsync(piNum1, piNum2);
        }
        
        public int Multiply(int piNum1, int piNum2) {
            return base.Channel.Multiply(piNum1, piNum2);
        }
        
        public System.Threading.Tasks.Task<int> MultiplyAsync(int piNum1, int piNum2) {
            return base.Channel.MultiplyAsync(piNum1, piNum2);
        }
        
        public int Divide(int piNum1, int piNum2) {
            return base.Channel.Divide(piNum1, piNum2);
        }
        
        public System.Threading.Tasks.Task<int> DivideAsync(int piNum1, int piNum2) {
            return base.Channel.DivideAsync(piNum1, piNum2);
        }
    }
}
